/**
 *
 * ①所有对象的实例以及数组都要在堆上分配。对象存储在堆上
 *
 * ②我们也可以不定义对象的句柄，而直接调用这个对象的方法。
 *  这样的对象叫做匿名对象。如：new Person().shout();
 *
 * ③现在Java语言支持的变量类型有：
 *      类变量(静态变量)：独立于方法之外的变量，用 static 修饰。类变量也称为静态变量，在类中以static关键字声明，但必须在方
 *              法构造方法和语句块之外。 --无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。有默认初始化值
 *      实例变量（成员变量）：独立于方法之外的变量，不过没有 static 修饰。
 *      局部变量：此类变量可存在与方法的形参和方法调用的实参。要是在类的方法中的变量。一定要显示初始化
 *
 *④     基本数据类型(8个)：
 *          int,byte,char,short,float,double,long,boolean
 *      包装类数据(8个)：
 *          Integer,Byte,Character,Short,Float,Double,Long,Boolean
 *
 * ⑤在构造方法方法内部，用this(参数1，参数2)表示对符合参数列表的同一个类的其它构造函数的调用
 *
 * ⑥什么是方法(method 、函数):
 *       方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中
 *          也称为函数或过程。
 *       将功能封装为方法的目的是，可以实现代码重用，简化代码
 *       Java里的方法不能独立存在，所有的方法必须定义在类里。
 *
 * ⑦数组形式的形参String []str可以处于形参列表的任意位置，而个数可变的形参
 *        String...str只能处于形参列表的最后。
 *         换句话说，一个方法中最多只能有一个长度可变的形参。
 *
 * ⑧我们程序设计追求“高内聚，低耦合”。
 *          高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；
 *          低耦合 ：仅对外暴露少量的方法用于使用。(减少相互功能模块之间的影响的可能性)
 *          //耦合是指两个或两个以上的体系或两种运动形式间通过相互作用而彼此影响以至联合起来的现象。
 *          //解耦就是用数学方法将两种运动分离开来处理问题
 *
 *
 *
 *⑨ 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。
 *      通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。
 *
 *
 *
 * ⑩ 对于class的权限修饰只可以用public和default(缺省)。
 *       public类可以在任意地方被访问。
 *       default类只可以被同一个包内部的类访问。
 *
 *
 * ①①  JavaBean是一种Java语言写成的可重用组件。
 *          所谓javaBean，是指符合如下标准的Java类：
 *              类是公共的
 *              有一个无参的公共的构造器
 *              有属性，且有对应的get、set方法
 *
 *
 * ①② 在类的一个构造器中，最多只能声明一个"this(形参列表)"
 *
 *
 * ①③ 1. 子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表
 *
 *      2 . 子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型
 *      3. 子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限
 *
 *      子类不能重写父类中声明为private权限的方法
 *      4. 子类方法抛出的异常不能大于父类被重写方法的异常
 *
 *①④ 子类中所有的构造器 默认都会访问父类中空参数的构造器
 *      如果子类构造器中既未显式调用父类或本类的构造器，
 *      且父类中又没有无参的构造器，则编译失败
 *
 *$$    Java中的输出语句有以下四种：
 *          System.out.println(1111);//换行打印
 *          System.out.print(1111);//不换行打印
 *
 *          System.out.write(2222);//字节输出
 *          System.out.printf("%+8.3f\n", 3.14);//按格式输出
 *`
 *          System.out.println(); 是最常用的输出语句，它会把括号里的内容转换成字符串输出到输出窗口（控制台），并且换行，
 *                  当输出的是一个基本数据类型时，会自动转换成字符串，如果输出的是一个对象，会自动调用对象的toString();
 *                  方法，将返回值输出到控制台
 *          System.out.print(); 与第一个很相似，区别就是上一个输出后会换行，而这个命令输出后并不换行。
 *          System.out.printf(); 这个方法延续了C语言的输出方式，通过格式化文本和参数列表输出。
 *
 *
 *
 *$$        1、JAVA中，char占2字节，16位。可在存放汉字
 *          2、char赋值
 *              char a='a';  //任意单个字符，加单引号。
 *              char a='中';//任意单个中文字，加单引号。
 *              char a=111;//整数。0~65535。十进制、八进制、十六进制均可。输出字符编码表中对应的字符。UTF-8字符集中的字符
 *              注：只能放单个字符。
 *          3、char运算
 *              char类型是可以运算的因为char在ASCII等字符编码表中有对应的数值。
 *              在JAVA中，对char类型字符运行时，直接当做ASCII表对应的整数来对待。
 *
 *
 *$$          switch 语句有关规则
 *                   switch(表达式)中表达式的值 必须是下述几种类型之一：byte ，short， ，
 *                  char ，int， ，举 枚举 (jdk 5.0) ，String (jdk 7.0)；
 *                   case子句中的值必须是 常量，不能是变量名或不确定的表达式值；
 *                   同一个switch语句，所有case子句中的常量值互不相同；
 *                   break语句用来在执行完一个case分支后使程序跳出switch语句块；如
 *                  果没有break，程序会顺序执行到switch结尾
 *                   default子句是 可任选的 的。同时，位置也是灵活的。当没有匹配的case时，
 *                  执行default
 *
 *
 *
 * $$       Java中定义成员变量时采用合法的前向引用
 *
 *
 *
 * $$        被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。
 *            static可以用来修饰类的成员方法、类的成员变量，另外可以编写static代码块来优化程序性能。
 *
 *
 *
 *$$          java 存在格式化特定索引位置参的数的格式化控制 由(索引+美元符号)：（%1$  %2$）来表达特定的参数
 *
 *
 *
 * $$          在static 方法内部只能访问类的static修饰的属性或方法，不能访问类的非static 的结构
 *
 *
 *
 * $$          java中功能必须封装在方法中
 *
 * $$          黙认浮点类型为double，float数据类型有一个后缀为" f "或" F "。
 *             如果低级类型为char型，向高级类型（整型）转换时，会转换为对应ASCII码值
 *
 *$$            boolean类型占了单独使用是4个字节，在数组中又是1个字节
 *              基本类型所占的存储空间是不变的。这种不变性也是Java具有可移植性的原因之一。
 *              基本类型放在栈中，直接存储值。
 *              所有数值类型都有正负号，没有无符号的数值类型。
 */